#!/usr/bin/env bash

## Important so that version is not extracted for failed commands (not found)
set -o pipefail

PASS='✔'
FAIL='✘'

OK=0
KO=0

REGEX_SIMPLE_VERSION="([[:digit:]]+\.?){2,3}"

__dynamic_detect(){
  cmd=$1
  params=$2
  version=$(eval ${cmd} ${params} "2>&1" | egrep -o "$REGEX_SIMPLE_VERSION" | head -1)
  status=$?
}

# commands that use `--version` flag
__dynamic_detect--version(){
  __dynamic_detect $1 "--version"
}

## commands that use `-version` flag
__dynamic_detect-version(){
  __dynamic_detect $1 "-version"
}

# commands that use `-v` flag
__dynamic_detect-v(){
  __dynamic_detect $1 "-v"
}


__detect(){
  name=$1

  # setup aliases
  case ${name} in
    golang) command="go" ;;
    jre) command="java" ;;
    jdk) command="javac" ;;
    nodejs) command="node" ;;
    goreplay) command="gor";;
    *)      command=${name} ;;
  esac

  case ${command} in

    # those that need --version flag
    git|hg|svn|bzr)         __dynamic_detect--version ${command} ;;
    node|npm)               __dynamic_detect--version ${command} ;;
    ruby|gem|rake|bundle)   __dynamic_detect--version ${command} ;;
    python|python3)         __dynamic_detect--version ${command} ;;
    perl|php)               __dynamic_detect--version ${command} ;;
    groovy|gradle|mvn)      __dynamic_detect--version ${command} ;;
    bash|zsh|curl|wget)     __dynamic_detect--version ${command} ;;
    vim|emacs|nano|subl)    __dynamic_detect--version ${command} ;;
    bats|tree|ack|autojump) __dynamic_detect--version ${command} ;;
    jq|ag|brew)             __dynamic_detect--version ${command} ;;

    # those that need -version flag
    ant|java|javac)         __dynamic_detect-version ${command} ;;


    ## Example of commands that need custom processing
    go)
      version=$(go version 2>&1| egrep -o "$REGEX_SIMPLE_VERSION" | head -1)
      status=$?
      ;;

    hugo)
      version=$(hugo version 2>&1| egrep -o "$REGEX_SIMPLE_VERSION" | head -1)
      status=$?
      ;;

    ab)
      version=$(ab -V 2>&1 | egrep -o "$REGEX_SIMPLE_VERSION" | head -1)
      status=$?
      ;;

    gor)
      version=$(gor version 2>&1 | egrep -o "$REGEX_SIMPLE_VERSION" | head -1)
      if [ $? -eq 1 ]; then status=0; else status=1; fi
      ;;

    *)
      ## Can allow dynamic checking here
      if [[ "${HAS_ALLOW_UNSAFE}" == "y" ]]; then
        __dynamic_detect--version ${command}
        ## fallback checking based on status!=127
      else
         status="-1"
      fi
      ;;
  esac

  ## When unsafe processing is not allowed, the -1 signifies
  if [ "$status" -eq "-1" ]; then

    echo ${FAIL} ${command} "not understood"
    KO=$(($KO+1))
  elif [ ${status} -eq 127 ]; then

    echo ${FAIL} ${command}
    KO=$(($KO+1))
  elif [ ${status} -eq 0 ]; then

    echo ${PASS} ${command} ${version}
    OK=$(($OK+1))
  else

    echo ${PASS} ${command}
    OK=$(($OK+1))
  fi

}


# if no arguments passed to script
if [ "$#" -eq 0 ]; then
  # print help
  BINARY_NAME="has"
  echo "${BINARY_NAME} v1.0"
  echo "USAGE:    ${BINARY_NAME} <command-names>.."
  echo "EXAMPLE:  ${BINARY_NAME} git curl node"

else

  # for each arg
  for cmd in "$@"; do
      __detect $cmd
  done

#  echo  ${OK} / $(($OK+$KO))
  exit ${KO}
fi


